ggplot(aes(x = Total_Trans_Amt^-0.1, y = Total_Trans_Ct^0.2)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.1, y = Total_Trans_Ct^0.5)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.1, y = Total_Trans_Ct^0.8)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.1, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.5, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.3, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.2, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^0.1, y = Total_Trans_Ct^0.8)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^0.1, y = Total_Trans_Ct^0.8)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Total Transaction Amount to the Power of 0.1",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.2, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
model <- lm(I(Total_Trans_Ct^0.7) ~ I(Total_Trans_Amt^-0.2), data = training_data)
training_data$predictions <- predict(model)
training_data$residual <- training_data$Total_Trans_Ct^0.8 - training_data$predictions
model <- lm(I(Total_Trans_Ct^0.7) ~ I(Total_Trans_Amt^-0.2), data = training_data)
training_data$predictions <- predict(model)
training_data$residual <- training_data$Total_Trans_Ct^0.7 - training_data$predictions
training_data %>%
ggplot(aes(x = predictions, y = residual)) +
geom_point(color = "dodgerblue", alpha = 0.3) +
labs(x = "Residual by Predicted Plot")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.2, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.1, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.1, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.2, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
model <- lm(I(Total_Trans_Ct^0.7) ~ I(Total_Trans_Amt^-0.1), data = training_data)
training_data$predictions <- predict(model)
training_data$residual <- training_data$Total_Trans_Ct^0.7 - training_data$predictions
training_data %>%
ggplot(aes(x = predictions, y = residual)) +
geom_point(color = "dodgerblue", alpha = 0.3) +
labs(x = "Residual by Predicted Plot")
model <- lm(I(Total_Trans_Ct^0.7) ~ I(Total_Trans_Amt^-0.2), data = training_data)
training_data$predictions <- predict(model)
training_data$residual <- training_data$Total_Trans_Ct^0.7 - training_data$predictions
training_data %>%
ggplot(aes(x = predictions, y = residual)) +
geom_point(color = "dodgerblue", alpha = 0.3) +
labs(x = "Residual by Predicted Plot")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.2, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
model <- lm(I(Total_Trans_Ct^0.7) ~ I(Total_Trans_Amt^-0.2), data = training_data)
training_data$predictions <- predict(model)
training_data$residual <- training_data$Total_Trans_Ct^0.7 - training_data$predictions
training_data %>%
ggplot(aes(x = predictions, y = residual)) +
geom_point(color = "dodgerblue", alpha = 0.3) +
labs(x = "Residual by Predicted Plot")
training_data[7089,]
training_data[c(7089,5557,4868, 1609),]
training_data[c(7089,5557,4868, 1609),] %>%
select(male, Customer_Age, Total_Trans_Amt, Total_Trans_Ct)
training_data[c(7089,5557,4868, 1609),] %>%
select(male, Customer_Age, Total_Trans_Amt, Total_Trans_Ct, residual)
training_data %>%
arrange(residual)
training_data %>%
arrange(residual, desc = FALSE)
mean(training_data$residual)
training_data %>%
arrange(residual, desc = FALSE)
training_data %>%
arrange(residual, desc = FALSE) %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level)
training_data %>%
arrange(residual, desc = FALSE) %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
top_n(n = 5)
training_data %>%
arrange(residual, desc = FALSE) %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
top_n(n = 5)
training_data %>%
arrange(residual, desc = FALSE) %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level)
training_data %>%
arrange(residual, desc = FALSE) %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
slice_max(order_by = residual, n =5)
training_data %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
slice_max(order_by = residual, n = 5)
training_data %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
slice_max(order_by = -residual, n = 5)
training_data %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
slice_max(order_by = residual, n = 5)
View(training_data)
training_data %>%
select(id = 244)
training_data %>%
filter(id = 244)
training_data %>%
filter(id == 244)
training_data %>%
filter(id == 244) %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level)
data %>%
ggplot(aes(x = Total_Trans_Amt, y = Total_Trans_Ct, color = as.factor(Exited))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", formula = y ~ poly(x, 3), se = FALSE) +
labs(x = "Total Transaction Amount",
y = "Total Transaction Count",
color = "Exit Status",
title = "Third Degree Polynomial Smoother for Customers who did and did not Exit") +
scale_color_manual(labels = c("Did not Exit", "Exited"), values = c("dodgerblue", "orange"))
model$coefficients
summary(model)
lm(Total_Trans_Ct ~ Total_Trans_Amt, data = training_data)$summary
lm(Total_Trans_Ct ~ Total_Trans_Amt, data = training_data)
mod <- lm(Total_Trans_Ct ~ Total_Trans_Amt, data = training_data)
mod$summary
summary(mod)
new_data <- data.frame(Total_Trans_Amt = 6000)
predict(model, newdata = new_data, interval = 'confidence')
predict(model, newdata = new_data, interval = 'confidence', level =0.95)
predict(model, newdata = new_data, interval = 'confidence', level =0.99)
predict(model, newdata = new_data, interval = 'confidence', level =0.95)
predict(model, newdata = new_data, interval = 'prediction', level =0.95)
new_data <- data.frame(Total_Trans_Amt = 6000)
predict(model, newdata = new_data, interval = 'confidence', level =0.95)
predict(model, newdata = new_data, interval = 'prediction', level =0.95)
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.2, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Total Transaction Amount to the Power of -0.2",
y = "Total Transaction Count to the Power of 0.7") +
geom_smooth(method = "lm", color = "red")
predict(model, newdata = test_data)
test_data$predictions <- predict(model, newdata = test_data)
View(test_data)
test_data$Ytrans <- test_data$Total_Trans_Ct^0.7
cor(test_data$predictions, test_data$Ytrans)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
library(tidyverse)
library(here)
library(reshape2)
library(vtable)
data <- read_csv(here("BankChurners.csv", "BankChurners.csv"))
data <- data %>%
mutate(Exited = case_when(Attrition_Flag == "Existing Customer" ~ 0,
Attrition_Flag == "Attrited Customer" ~ 1),
male = case_when(Gender == "M" ~ 1,
Gender == "F" ~ 0),
) %>%
select(-Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1,
-Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2,
-Gender,
-Attrition_Flag,
-CLIENTNUM)
descriptive_stats <- data %>%
select_if(is.numeric) %>%
st(out = "return")
descriptive_stats
data %>%
select_if(is.numeric) %>%
cor() %>%
round(2) %>%
melt() %>%
ggplot(aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1.1, size = 8, hjust = 1.1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
coord_fixed() +
labs(title = "Correlation Matrix of All Numeric Variables")
cor <- cor(data$Avg_Open_To_Buy, data$Credit_Limit)
cat("Correlation between Avg_Open_To_Buy and Credit_Limit:", cor)
data <- data %>%
select(-Avg_Open_To_Buy)
cor_matrix <- cor(data %>%
select_if(is.numeric)) %>%
round(2)
cor_matrix %>%
as.data.frame() %>%
select(Total_Trans_Ct) %>%
arrange(Total_Trans_Ct)
data %>%
ggplot(aes(x = Total_Trans_Ct)) +
geom_histogram(fill = "dodgerblue") +
labs(x= "Total Transaction Count",
title = "Distribution of Total Transaction Count")
data %>%
ggplot(aes(x = Total_Trans_Ct)) +
geom_histogram() +
facet_wrap(~ Income_Category, ncol = 1) +
labs(x = "Total Transaction Count")
data %>%
ggplot(aes(x = Total_Trans_Ct)) +
geom_histogram() +
facet_wrap(~ Exited, nrow = 2) +
labs(x = "Total Transaction Count",
title = "Distribution of Total Transaction Count by Exit Status")
data %>%
group_by(Total_Relationship_Count) %>%
summarise(mean(Total_Trans_Ct))
data %>%
ggplot(aes(x = as.factor(Total_Relationship_Count),
y = Total_Trans_Ct)) +
geom_bar(stat = "summary",
fun = mean,
fill = "dodgerblue") +
labs(x = "Total Number of Products the Customer Has",
y= "Average Total Transaction Count")
data %>%
ggplot(aes(x = Total_Trans_Amt, y = Total_Trans_Ct, color = as.factor(Exited))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", formula = y ~ poly(x, 3), se = FALSE) +
labs(x = "Total Transaction Amount",
y = "Total Transaction Count",
color = "Exit Status",
title = "Third Degree Polynomial Smoother for Customers who did and did not Exit") +
scale_color_manual(labels = c("Did not Exit", "Exited"), values = c("dodgerblue", "orange"))
set.seed(9)
data$id <- 1:nrow(data)
training_data <- data %>%
sample_frac(0.7)
test_data <- data %>%
anti_join(training_data, by = 'id')
training_data %>%
ggplot(aes(x = Total_Trans_Amt^0.5, y = Total_Trans_Ct^2)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count Squared") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = sqrt(Total_Trans_Amt), y = sqrt(Total_Trans_Ct))) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Square Root Total Transaction Count") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = sqrt(Total_Trans_Amt), y = Total_Trans_Ct^0.8)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^0.1, y = Total_Trans_Ct^0.8)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Total Transaction Amount to the Power of 0.1",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
model <- lm(I(Total_Trans_Ct^0.8) ~ I(Total_Trans_Amt^0.1), data = training_data)
training_data$predictions <- predict(model)
training_data$residual <- training_data$Total_Trans_Ct^0.8 - training_data$predictions
training_data %>%
ggplot(aes(x = predictions, y = residual)) +
geom_point(color = "dodgerblue", alpha = 0.3) +
labs(x = "Residual by Predicted Plot")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.2, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Total Transaction Amount to the Power of -0.2",
y = "Total Transaction Count to the Power of 0.7") +
geom_smooth(method = "lm", color = "red")
model <- lm(I(Total_Trans_Ct^0.7) ~ I(Total_Trans_Amt^-0.2), data = training_data)
training_data$predictions <- predict(model)
training_data$residual <- training_data$Total_Trans_Ct^0.7 - training_data$predictions
training_data %>%
ggplot(aes(x = predictions, y = residual)) +
geom_point(color = "dodgerblue", alpha = 0.3) +
labs(x = "Residual by Predicted Plot")
training_data %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
slice_max(order_by = -residual, n = 5)
training_data %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
slice_max(order_by = residual, n = 5)
training_data %>%
filter(id == 244) %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level)
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.2, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Total Transaction Amount to the Power of -0.2",
y = "Total Transaction Count to the Power of 0.7") +
geom_smooth(method = "lm", color = "red")
summary(model)
new_data <- data.frame(Total_Trans_Amt = 6000)
predict(model, newdata = new_data, interval = 'confidence', level =0.95)
predict(model, newdata = new_data, interval = 'prediction', level =0.95)
test_data$predictions <- predict(model, newdata = test_data)
test_data$Ytrans <- test_data$Total_Trans_Ct^0.7
cor(test_data$predictions, test_data$Ytrans)
cor(training_data$predictions, training_data$Total_Trans_Ct^0.7)
cor(test_data$predictions, test_data$Ytrans)
cor(training_data$predictions, training_data$Total_Trans_Ct^0.7)
cor(test_data$predictions, test_data$Ytrans)
cor(training_data$predictions, training_data$Total_Trans_Ct^0.7)
test_data$predictions <- predict(model, newdata = test_data)
test_data$Ytrans <- test_data$Total_Trans_Ct^0.7
cat("Correlation between testing data predictions and actual values", cor(test_data$predictions, test_data$Ytrans))
cat("Correlation between training data predictions and actual values:", cor(training_data$predictions, training_data$Total_Trans_Ct^0.7))
test_data$predictions <- predict(model, newdata = test_data)
test_data$Ytrans <- test_data$Total_Trans_Ct^0.7
cat("Correlation between testing data predictions and actual values", cor(test_data$predictions, test_data$Ytrans))
cat("Correlation between training data predictions and actual values:", cor(training_data$predictions, training_data$Total_Trans_Ct^0.7))
test_data$predictions <- predict(model, newdata = test_data)
test_data$Ytrans <- test_data$Total_Trans_Ct^0.7
cat("Correlation between testing data predictions and actual values", cor(test_data$predictions, test_data$Ytrans))
cat("Correlation between training data predictions and actual values:", cor(training_data$predictions, training_data$Total_Trans_Ct^0.7))
test_data$predictions <- predict(model, newdata = test_data)
test_data$Ytrans <- test_data$Total_Trans_Ct^0.7
cat("Correlation between testing data predictions and actual values", round(cor(test_data$predictions, test_data$Ytrans)), 4)
cat("Correlation between training data predictions and actual values:", round(cor(training_data$predictions, training_data$Total_Trans_Ct^0.7)), 4)
cat("Correlation between testing data predictions and actual values", cor(test_data$predictions, test_data$Ytrans))
cat("Correlation between testing data predictions and actual values", round(cor(test_data$predictions, test_data$Ytrans), 4))
cat("Correlation between training data predictions and actual values:", round(cor(training_data$predictions, training_data$Total_Trans_Ct^0.7), 4))
cat("Correlation between testing data predictions and actual values", round(cor(test_data$predictions, test_data$Ytrans), 4))
cat("Correlation between training data predictions and actual values:", round(cor(training_data$predictions, training_data$Total_Trans_Ct^0.7), 6))
cat("Correlation between training data predictions and actual values:", round(cor(training_data$predictions, training_data$Total_Trans_Ct^0.7), 5))
cat("Correlation between training data predictions and actual values:", round(cor(training_data$predictions, training_data$Total_Trans_Ct^0.7), 4))
cat("Correlation between testing data predictions and actual values", round(cor(test_data$predictions, test_data$Ytrans), 4))
cat("Correlation between training data predictions and actual values:", round(cor(training_data$predictions, training_data$Total_Trans_Ct^0.7), 5))
cat("Correlation between testing data predictions and actual values", round(cor(test_data$predictions, test_data$Ytrans), 5))
cat("Correlation between training data predictions and actual values:", round(cor(training_data$predictions, training_data$Total_Trans_Ct^0.7), 5))
cat("Correlation between testing data predictions and actual values", round(cor(test_data$predictions, test_data$Ytrans), 5))
test_data$predictions <- predict(model, newdata = test_data)
test_data$Ytrans <- test_data$Total_Trans_Ct^0.7
cat("Correlation between testing data predictions and actual values", round(cor(test_data$predictions, test_data$Ytrans), 5))
cat("Correlation between training data predictions and actual values:", round(cor(training_data$predictions, training_data$Total_Trans_Ct^0.7), 5))
cat("Correlation between testing data predictions and actual values", round(cor(test_data$predictions, test_data$Ytrans), 5))
model <- lm(I(Total_Trans_Ct^0.7) ~ I(Total_Trans_Amt^-0.2), data = training_data)
model <- lm(I(Total_Trans_Ct^0.7) ~ I(Total_Trans_Amt^-0.2), data = training_data)
training_data$predictions <- predict(model)
training_data$residual <- training_data$Total_Trans_Ct^0.7 - training_data$predictions
summary(model)
model
new_data <- data.frame(Total_Trans_Amt = 6000)
predict(model, newdata = new_data, interval = 'confidence', level =0.95)
predict(model, newdata = new_data, interval = 'prediction', level =0.95)
cat("Correlation between testing data predictions and actual values", round(cor(test_data$predictions, test_data$Total_Trans_Ct^0.7), 5))
cat("Correlation between training data predictions and actual values:", round(cor(training_data$predictions, training_data$Total_Trans_Ct^0.7), 5))
cat("Correlation between testing data predictions and actual values", round(cor(test_data$predictions, test_data$Total_Trans_Ct^0.7), 5))
cat("Correlation between training data predictions and actual values:", round(cor(training_data$predictions, training_data$Total_Trans_Ct^0.7), 5))
cat("Correlation between testing data predictions and actual values", round(cor(test_data$predictions, test_data$Total_Trans_Ct^0.7), 5))
cat("Correlation between training data predictions and actual values:", round(cor(training_data$predictions, training_data$Total_Trans_Ct^0.7), 5))
cat("Correlation between testing data predictions and actual values", round(cor(test_data$predictions, test_data$Total_Trans_Ct^0.7), 5))
predict(model, newdata = test_data)
cat("Correlation between testing data predictions and actual values", cor(test_data$predictions, test_data$Total_Trans_Ct^0.7))
test_data$predictions <- predict(model, newdata = test_data)
test_data$Ytrans <- test_data$Total_Trans_Ct^0.7
cat("Correlation between testing data predictions and actual values", cor(test_data$predictions, test_data$Total_Trans_Ct^0.7))
cat("Correlation between training data predictions and actual values:", cor(training_data$predictions, training_data$Total_Trans_Ct^0.7))
test_data$predictions <- predict(model, newdata = test_data)
test_data$Ytrans <- test_data$Total_Trans_Ct^0.7
cat("Correlation between testing data predictions and actual values", cor(test_data$predictions, test_data$Total_Trans_Ct^0.7))
summary(model)
training_data %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
slice_max(order_by = -residual, n = 10)
training_data %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
slice_max(order_by = -residual, n = 15)
training_data %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
slice_max(order_by = -residual, n = 10)
min(data$Total_Trans_Amt)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
data %>%
ggplot(aes(x = Total_Trans_Ct)) +
geom_histogram() +
facet_wrap(~ Income_Category, ncol = 1) +
labs(x = "Total Transaction Count")
data %>%
ggplot(aes(x = Total_Trans_Ct)) +
geom_histogram() +
facet_wrap(~ Exited, nrow = 2) +
labs(x = "Total Transaction Count",
title = "Distribution of Total Transaction Count by Exit Status (1 means Exited)")
data %>%
ggplot(aes(x = as.factor(Total_Relationship_Count),
y = Total_Trans_Ct)) +
geom_bar(stat = "summary",
fun = mean,
fill = "dodgerblue") +
labs(x = "Total Number of Products the Customer Has",
y= "Average Total Transaction Count")
data %>%
filter(id == 9784 | id == 10098)
data %>%
filter(id == 9784 | id == 10098) %>%
select(Customer_Age, Education_Level, Income_Category, Credit_Limit, Total_Trans_Amt, Total_Trans_Ct, Exited)
descriptive_stats %>%
filter(Variable == "Total_Trans_Amt")
descriptive_stats %>%
filter(Variable == "Total_Trans_Amt" | Variable == "Total_Trans_Count")
descriptive_stats %>%
filter(Variable == "Total_Trans_Amt" | Variable == "Total_Trans_Ct")
training_data %>%
ggplot(aes(x = Total_Trans_Amt, y = Total_Trans_Ct)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm")
training_data %>%
ggplot(aes(x = Total_Trans_Amt, y = Total_Trans_Ct)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
geom_smooth(method = "lm", color = "red") +
labs(x = "Total Transaction Amount",
y = "Total Transaction Count")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^0.5, y = Total_Trans_Ct^2)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count Squared") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = sqrt(Total_Trans_Amt), y = sqrt(Total_Trans_Ct))) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Square Root Total Transaction Count") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = sqrt(Total_Trans_Amt), y = Total_Trans_Ct^0.8)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^0.1, y = Total_Trans_Ct^0.8)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Total Transaction Amount to the Power of 0.1",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
data %>%
filter(id == 9784 | id == 10098) %>%
select(Customer_Age, Education_Level, Income_Category, Credit_Limit, Total_Trans_Amt, Total_Trans_Ct, Exited)
View(data)
data %>%
filter(id == 9784 | id == 10098) %>%
select(Customer_Age, Education_Level, Income_Category, Credit_Limit, Total_Trans_Amt, Total_Trans_Ct, Exited)
