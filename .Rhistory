ggplot(aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1.1, size = 8, hjust = 1.1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
coord_fixed() +
labs(title = "Correlation Matrix of All Numeric Variables")
cor <- cor(data$Avg_Open_To_Buy, data$Credit_Limit)
cat("Correlation between Avg_Open_To_Buy and Credit_Limit:", cor)
data <- data %>%
select(-Avg_Open_To_Buy)
cor_matrix <- cor(data %>%
select_if(is.numeric)) %>%
round(2)
cor_matrix %>%
as.data.frame() %>%
select(Total_Trans_Ct) %>%
arrange(Total_Trans_Ct)
data %>%
ggplot(aes(x = Total_Trans_Ct)) +
geom_histogram(fill = "dodgerblue") +
labs(x= "Total Transaction Count",
title = "Distribution of Total Transaction Count")
data %>%
ggplot(aes(x = Total_Trans_Ct)) +
geom_histogram() +
facet_wrap(~ Income_Category, ncol = 1) +
labs(x = "Total Transaction Count")
data %>%
ggplot(aes(x = Total_Trans_Ct)) +
geom_histogram() +
facet_wrap(~ Exited, nrow = 2) +
labs(x = "Total Transaction Count",
title = "Distribution of Total Transaction Count by Exit Status (1 means Exited)")
data %>%
ggplot(aes(x = as.factor(Total_Relationship_Count),
y = Total_Trans_Ct)) +
geom_bar(stat = "summary",
fun = mean,
fill = "dodgerblue") +
labs(x = "Total Number of Products the Customer Has",
y= "Average Total Transaction Count")
data %>%
ggplot(aes(x = Total_Trans_Amt, y = Total_Trans_Ct, color = as.factor(Exited))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", formula = y ~ poly(x, 3), se = FALSE) +
labs(x = "Total Transaction Amount",
y = "Total Transaction Count",
color = "Exit Status",
title = "Third Degree Polynomial Smoother for Customers who did and did not Exit") +
scale_color_manual(labels = c("Did not Exit", "Exited"), values = c("dodgerblue", "orange"))
descriptive_stats %>%
filter(Variable == "Total_Trans_Amt" | Variable == "Total_Trans_Ct")
set.seed(9)
data$id <- 1:nrow(data)
training_data <- data %>%
sample_frac(0.7)
test_data <- data %>%
anti_join(training_data, by = 'id')
training_data %>%
ggplot(aes(x = Total_Trans_Amt, y = Total_Trans_Ct)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
geom_smooth(method = "lm", color = "red") +
labs(x = "Total Transaction Amount",
y = "Total Transaction Count")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^0.5, y = Total_Trans_Ct^2)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count Squared") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = sqrt(Total_Trans_Amt), y = sqrt(Total_Trans_Ct))) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Square Root Total Transaction Count") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = sqrt(Total_Trans_Amt), y = Total_Trans_Ct^0.8)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^0.1, y = Total_Trans_Ct^0.8)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Total Transaction Amount to the Power of 0.1",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
model <- lm(I(Total_Trans_Ct^0.8) ~ I(Total_Trans_Amt^0.1), data = training_data)
training_data$predictions <- predict(model)
training_data$residual <- training_data$Total_Trans_Ct^0.8 - training_data$predictions
training_data %>%
ggplot(aes(x = predictions, y = residual)) +
geom_point(color = "dodgerblue", alpha = 0.3) +
labs(x = "Predicted")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.2, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Total Transaction Amount to the Power of -0.2",
y = "Total Transaction Count to the Power of 0.7") +
geom_smooth(method = "lm", color = "red")
model <- lm(I(Total_Trans_Ct^0.7) ~ I(Total_Trans_Amt^-0.2), data = training_data)
training_data$predictions <- predict(model)
training_data$residual <- training_data$Total_Trans_Ct^0.7 - training_data$predictions
training_data %>%
ggplot(aes(x = predictions, y = residual)) +
geom_point(color = "dodgerblue", alpha = 0.3) +
labs(x = "Residual by Predicted Plot")
training_data %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
slice_max(order_by = -residual, n = 10)
training_data %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
slice_max(order_by = residual, n = 5)
descriptive_stats %>%
filter(Variable == "Total_Trans_Amt" | Variable == "Total_Trans_Ct")
training_data %>%
filter(id == 244) %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level)
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.2, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Total Transaction Amount to the Power of -0.2",
y = "Total Transaction Count to the Power of 0.7") +
geom_smooth(method = "lm", color = "red")
summary(model)
new_data <- data.frame(Total_Trans_Amt = 6000)
predict(model, newdata = new_data, interval = 'confidence', level =0.95)
predict(model, newdata = new_data, interval = 'prediction', level =0.95)
test_data$predictions <- predict(model, newdata = test_data)
test_data$Ytrans <- test_data$Total_Trans_Ct^0.7
cat("Correlation between testing data predictions and actual values", cor(test_data$predictions, test_data$Total_Trans_Ct^0.7))
training_data %>%
select(Total_Trans_Ct,
Total_Trans_Amt,
Exited,
Total_Relationship_Count,
Credit_Limit) %>%
cor() %>%
round(2) %>%
melt() %>%
ggplot(aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1.1, size = 8, hjust = 1.1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
coord_fixed() +
labs(title = "Correlation Matrix of All Numeric Variables")
training_data %>%
select(Total_Trans_Ct,
Total_Trans_Amt,
Exited,
Total_Relationship_Count,
Credit_Limit) %>%
cor()
MLmodel <- lm(Total_Trans_Ct ~ I(Total_Trans_Amt^0.001) + Credit_Limit + I(Total_Relationship_Count^0.5) + as.factor(Exited), data = training_data)
interval_data <- data.frame(Total_Trans_Amt = 6000, Credit_Limit = 11000, Total_Relationship_Count = 4, Exited = 0)
predict(MLmodel, newdata = interval_data, interval = 'confidence', level =0.95)
predict(MLmodel, newdata = interval_data, interval = 'prediction', level =0.95)
training_data %>%
ggplot(aes(x = Total_Trans_Amt, y = Total_Trans_Ct, color = as.factor(Exited))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", formula = y ~ poly(x, 3), se = FALSE) +
labs(x = "Total Transaction Amount",
y = "Total Transaction Count",
color = "Exit Status",
title = "Third Degree Polynomial Smoother for Customers who did and did not Exit") +
scale_color_manual(labels = c("Did not Exit", "Exited"), values = c("dodgerblue", "orange"))
library(caret)
library(rlang)
session_info()
sessionInfo()
library(caret)
install.packages(c("bdsmatrix", "bit", "brew", "broom", "bslib", "callr", "car", "classInt", "cli", "commonmark", "cpp11", "crayon", "crimedata", "curl", "data.table", "datawizard", "DBI", "dbplyr", "desc", "devtools", "digest", "dplyr", "DT", "dtplyr", "e1071", "EMCluster", "evaluate", "farver", "fontawesome", "forcats", "furrr", "gargle", "generics", "gert", "gganimate", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "gh", "gitcreds", "googlesheets4", "gtable", "haven", "hms", "htmltools", "httpuv", "httr", "insight", "isoband", "jsonlite", "knitr", "lme4", "lubridate", "maptools", "markdown", "Matching", "MatchIt", "MatrixModels", "minqa", "modelr", "openssl", "packrat", "philentropy", "pillar", "pkgbuild", "pkgload", "plyr", "png", "poorman", "processx", "proxy", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppEigen", "readr", "readxl", "reprex", "rgdal", "rmarkdown", "roxygen2", "rsconnect", "rstatix", "rstudioapi", "rversions", "rvest", "s2", "sass", "scales", "sf", "shiny", "sp", "streamR", "stringi", "stringr", "sys", "terra", "testthat", "tibble", "tictoc", "tidyr", "tidyverse", "tinytex", "tweenr", "usethis", "vctrs", "viridisLite", "vroom", "vtable", "webshot", "whisker", "wk", "xfun", "XML", "yaml", "zip"))
install.packages(c("bdsmatrix", "bit", "brew", "broom", "bslib", "callr", "car", "classInt", "cli", "commonmark", "cpp11", "crayon", "crimedata", "curl", "data.table", "datawizard", "DBI", "dbplyr", "desc", "devtools", "digest", "dplyr", "DT", "dtplyr", "e1071", "EMCluster", "evaluate", "farver", "fontawesome", "forcats", "furrr", "gargle", "generics", "gert", "gganimate", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "gh", "gitcreds", "googlesheets4", "gtable", "haven", "hms", "htmltools", "httpuv", "httr", "insight", "isoband", "jsonlite", "knitr", "lme4", "lubridate", "maptools", "markdown", "Matching", "MatchIt", "MatrixModels", "minqa", "modelr", "openssl", "packrat", "philentropy", "pillar", "pkgbuild", "pkgload", "plyr", "png", "poorman", "processx", "proxy", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppEigen", "readr", "readxl", "reprex", "rgdal", "rmarkdown", "roxygen2", "rsconnect", "rstatix", "rstudioapi", "rversions", "rvest", "s2", "sass", "scales", "sf", "shiny", "sp", "streamR", "stringi", "stringr", "sys", "terra", "testthat", "tibble", "tictoc", "tidyr", "tidyverse", "tinytex", "tweenr", "usethis", "vctrs", "viridisLite", "vroom", "vtable", "webshot", "whisker", "wk", "xfun", "XML", "yaml", "zip"))
install.packages(c("bdsmatrix", "bit", "brew", "broom", "bslib", "callr", "car", "classInt", "cli", "commonmark", "cpp11", "crayon", "crimedata", "curl", "data.table", "datawizard", "DBI", "dbplyr", "desc", "devtools", "digest", "dplyr", "DT", "dtplyr", "e1071", "EMCluster", "evaluate", "farver", "fontawesome", "forcats", "furrr", "gargle", "generics", "gert", "gganimate", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "gh", "gitcreds", "googlesheets4", "gtable", "haven", "hms", "htmltools", "httpuv", "httr", "insight", "isoband", "jsonlite", "knitr", "lme4", "lubridate", "maptools", "markdown", "Matching", "MatchIt", "MatrixModels", "minqa", "modelr", "openssl", "packrat", "philentropy", "pillar", "pkgbuild", "pkgload", "plyr", "png", "poorman", "processx", "proxy", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppEigen", "readr", "readxl", "reprex", "rgdal", "rmarkdown", "roxygen2", "rsconnect", "rstatix", "rstudioapi", "rversions", "rvest", "s2", "sass", "scales", "sf", "shiny", "sp", "streamR", "stringi", "stringr", "sys", "terra", "testthat", "tibble", "tictoc", "tidyr", "tidyverse", "tinytex", "tweenr", "usethis", "vctrs", "viridisLite", "vroom", "vtable", "webshot", "whisker", "wk", "xfun", "XML", "yaml", "zip"))
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(caret)
library(tidyverse)
install.packages("xfun")
library(tidyverse)
library(dplyr)
2+2
tibble(hasfd = "DAf")
library(tidyverse)
install.packages(c("cli", "digest", "dplyr", "htmltools", "tibble", "vctrs"))
library(tidyverse)
install.packages("dplyr")
library(tidyverse)
install.packages(c("cli", "tibble", "vctrs"))
install.packages(c("cli", "tibble", "vctrs"))
install.packages(c("cli", "tibble", "vctrs"))
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(tidyverse)
library(here)
library(vtable)
library(reshape2)
2+2
library(caret)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(tidyverse)
library(here)
library(vtable)
library(reshape2)
library(caret)
2+2
data <- read_csv(here("BankChurners.csv", "BankChurners.csv"))
data <- data %>%
mutate(Exited = case_when(Attrition_Flag == "Existing Customer" ~ 0,
Attrition_Flag == "Attrited Customer" ~ 1),
male = case_when(Gender == "M" ~ 1,
Gender == "F" ~ 0),
) %>%
select(-Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1,
-Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2,
-Gender,
-Attrition_Flag,
-CLIENTNUM)
descriptive_stats <- data %>%
select_if(is.numeric) %>%
st(out = "return")
descriptive_stats
data %>%
select_if(is.numeric) %>%
cor() %>%
round(2) %>%
melt() %>%
ggplot(aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1.1, size = 8, hjust = 1.1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
coord_fixed() +
labs(title = "Correlation Matrix of All Numeric Variables")
cor <- cor(data$Avg_Open_To_Buy, data$Credit_Limit)
cat("Correlation between Avg_Open_To_Buy and Credit_Limit:", cor)
data <- data %>%
select(-Avg_Open_To_Buy)
cor_matrix <- cor(data %>%
select_if(is.numeric)) %>%
round(2)
cor_matrix %>%
as.data.frame() %>%
select(Total_Trans_Ct) %>%
arrange(Total_Trans_Ct)
data %>%
ggplot(aes(x = Total_Trans_Ct)) +
geom_histogram(fill = "dodgerblue") +
labs(x= "Total Transaction Count",
title = "Distribution of Total Transaction Count")
data %>%
ggplot(aes(x = Total_Trans_Ct)) +
geom_histogram() +
facet_wrap(~ Income_Category, ncol = 1) +
labs(x = "Total Transaction Count")
data %>%
ggplot(aes(x = Total_Trans_Ct)) +
geom_histogram() +
facet_wrap(~ Exited, nrow = 2) +
labs(x = "Total Transaction Count",
title = "Distribution of Total Transaction Count by Exit Status (1 means Exited)")
data %>%
ggplot(aes(x = as.factor(Total_Relationship_Count),
y = Total_Trans_Ct)) +
geom_bar(stat = "summary",
fun = mean,
fill = "dodgerblue") +
labs(x = "Total Number of Products the Customer Has",
y= "Average Total Transaction Count")
data %>%
ggplot(aes(x = Total_Trans_Amt, y = Total_Trans_Ct, color = as.factor(Exited))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", formula = y ~ poly(x, 3), se = FALSE) +
labs(x = "Total Transaction Amount",
y = "Total Transaction Count",
color = "Exit Status",
title = "Third Degree Polynomial Smoother for Customers who did and did not Exit") +
scale_color_manual(labels = c("Did not Exit", "Exited"), values = c("dodgerblue", "orange"))
descriptive_stats %>%
filter(Variable == "Total_Trans_Amt" | Variable == "Total_Trans_Ct")
set.seed(9)
data$id <- 1:nrow(data)
training_data <- data %>%
sample_frac(0.7)
test_data <- data %>%
anti_join(training_data, by = 'id')
training_data %>%
ggplot(aes(x = Total_Trans_Amt, y = Total_Trans_Ct)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
geom_smooth(method = "lm", color = "red") +
labs(x = "Total Transaction Amount",
y = "Total Transaction Count")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^0.5, y = Total_Trans_Ct^2)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count Squared") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = sqrt(Total_Trans_Amt), y = sqrt(Total_Trans_Ct))) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Square Root Total Transaction Count") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = sqrt(Total_Trans_Amt), y = Total_Trans_Ct^0.8)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Square Root Total Transaction Amount",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^0.1, y = Total_Trans_Ct^0.8)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Total Transaction Amount to the Power of 0.1",
y = "Total Transaction Count to the Power of 0.8") +
geom_smooth(method = "lm", color = "red")
model <- lm(I(Total_Trans_Ct^0.8) ~ I(Total_Trans_Amt^0.1), data = training_data)
training_data$predictions <- predict(model)
training_data$residual <- training_data$Total_Trans_Ct^0.8 - training_data$predictions
training_data %>%
ggplot(aes(x = predictions, y = residual)) +
geom_point(color = "dodgerblue", alpha = 0.3) +
labs(x = "Predicted")
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.2, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Total Transaction Amount to the Power of -0.2",
y = "Total Transaction Count to the Power of 0.7") +
geom_smooth(method = "lm", color = "red")
model <- lm(I(Total_Trans_Ct^0.7) ~ I(Total_Trans_Amt^-0.2), data = training_data)
training_data$predictions <- predict(model)
training_data$residual <- training_data$Total_Trans_Ct^0.7 - training_data$predictions
training_data %>%
ggplot(aes(x = predictions, y = residual)) +
geom_point(color = "dodgerblue", alpha = 0.3) +
labs(x = "Residual by Predicted Plot")
training_data %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
slice_max(order_by = -residual, n = 10)
training_data %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level) %>%
slice_max(order_by = residual, n = 5)
descriptive_stats %>%
filter(Variable == "Total_Trans_Amt" | Variable == "Total_Trans_Ct")
training_data %>%
filter(id == 244) %>%
select(residual, Exited, Total_Trans_Amt, Total_Trans_Ct, Education_Level)
training_data %>%
ggplot(aes(x = Total_Trans_Amt^-0.2, y = Total_Trans_Ct^0.7)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Total Transaction Amount to the Power of -0.2",
y = "Total Transaction Count to the Power of 0.7") +
geom_smooth(method = "lm", color = "red")
summary(model)
new_data <- data.frame(Total_Trans_Amt = 6000)
predict(model, newdata = new_data, interval = 'confidence', level =0.95)
predict(model, newdata = new_data, interval = 'prediction', level =0.95)
test_data$predictions <- predict(model, newdata = test_data)
test_data$Ytrans <- test_data$Total_Trans_Ct^0.7
cat("Correlation between testing data predictions and actual values", cor(test_data$predictions, test_data$Total_Trans_Ct^0.7))
training_data %>%
select(Total_Trans_Ct,
Total_Trans_Amt,
Exited,
Total_Relationship_Count,
Credit_Limit) %>%
cor() %>%
round(2) %>%
melt() %>%
ggplot(aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1.1, size = 8, hjust = 1.1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
coord_fixed() +
labs(title = "Correlation Matrix of All Numeric Variables")
training_data %>%
select(Total_Trans_Ct,
Total_Trans_Amt,
Exited,
Total_Relationship_Count,
Credit_Limit) %>%
cor()
MLmodel <- lm(Total_Trans_Ct ~ I(Total_Trans_Amt^0.001) + Credit_Limit + I(Total_Relationship_Count^0.5) + as.factor(Exited), data = training_data)
interval_data <- data.frame(Total_Trans_Amt = 6000, Credit_Limit = 11000, Total_Relationship_Count = 4, Exited = 0)
predict(MLmodel, newdata = interval_data, interval = 'confidence', level =0.95)
predict(MLmodel, newdata = interval_data, interval = 'prediction', level =0.95)
training_data %>%
ggplot(aes(x = Total_Trans_Amt, y = Total_Trans_Ct, color = as.factor(Exited))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", formula = y ~ poly(x, 3), se = FALSE) +
labs(x = "Total Transaction Amount",
y = "Total Transaction Count",
color = "Exit Status",
title = "Third Degree Polynomial Smoother for Customers who did and did not Exit") +
scale_color_manual(labels = c("Did not Exit", "Exited"), values = c("dodgerblue", "orange"))
library(caret)
training_data %>%
ggplot(aes(x = as.factor(Exited), y = Total_Trans_Ct, fill = as.factor(Exited))) +
geom_boxplot() +
scale_fill_manual(values = c("dodgerblue", "red")) +
scale_x_discrete(labels = c("Did not Exit", "Exited")) +
theme(axis.title.x = element_blank(),
legend.position = "none") +
labs(y = "Total Transaction Count")
training_data %>%
ggplot(aes(x = as.factor(Exited), y = Total_Trans_Amt, fill = as.factor(Exited))) +
geom_boxplot() +
scale_fill_manual(values = c("dodgerblue", "red")) +
scale_x_discrete(labels = c("Did not Exit", "Exited")) +
theme(axis.title.x = element_blank(),
legend.position = "none") +
labs(y = "Total Transaction Amount ($)")
dummy <- dummyVars(" ~ .", data=training_data)
dummy
naadfa<- data.frame(predict(dummy, newdata = training_data))
View(naadfa)
one_hot_training <- data.frame(predict(dummy, newdata = training_data))
ML_model2 <- lm(Total_Trans_Ct ~ Total_Trans_Amt, data = one_hot_training)
ML_model2 <- lm(Total_Trans_Ct ~ Total_Trans_Amt + I(Total_Trans_Amt^2) + I(Total_Trans_Amt^3) , data = one_hot_training)
ML_model2$model
ML_model2$call
ML_model2 <- lm(Total_Trans_Ct ~ Total_Trans_Amt + I(Total_Trans_Amt^2) + I(Total_Trans_Amt^3) + Marital_StatusDivorced + Marital_StatusMarried + Marital_StatusUnknown, data = one_hot_training)
summary(ML_model2)
ML_model2 <- lm(Total_Trans_Ct ~ Total_Trans_Amt + I(Total_Trans_Amt^2) + I(Total_Trans_Amt^3) + Marital_StatusDivorced + Marital_StatusMarried + Marital_StatusUnknown + Credit_Limit + Total_Relationship_Count + Exited, data = one_hot_training)
summary(ML_model2)
ML_model2 <- lm(Total_Trans_Ct ~ Total_Trans_Amt + I(Total_Trans_Amt^2) + I(Total_Trans_Amt^3) + Marital_StatusDivorced + Marital_StatusMarried + Marital_StatusUnknown + Total_Relationship_Count + Exited, data = one_hot_training)
summary(ML_model2)
ML_model2$residuals
View(one_hot_training)
one_hot_training$residuals_one_hot <- ML_model2$residuals
ML_model2$fitted.values
one_hot_training$residuals_one_hot <- ML_model2$residuals
one_hot_training$predicted_one_hot <- ML_model2$fitted.values
one_hot_training %>%
ggplot(aes(y = residuals_one_hot, x = predicted_one_hot)) +
geom_point()
one_hot_training %>%
ggplot(aes(y = residuals_one_hot, x = predicted_one_hot)) +
geom_point(alpha = 0.3, color = "dodgerblue") +
labs(x = "Predicted",
y = "Residuals")
summary(ML_model2)
ML_model2 <- lm(Total_Trans_Ct ~ Total_Trans_Amt + I(Total_Trans_Amt^2) + I(Total_Trans_Amt^3) + Marital_StatusDivorced + Marital_StatusMarried + Marital_StatusUnknown + Total_Relationship_Count + Exited, data = one_hot_training)
dummy <- dummyVars(" ~ .", data=training_data)
one_hot_training <- data.frame(predict(dummy, newdata = training_data))
dummy2 <- dummyVars(" ~ .", data=test_data)
one_hot_test <- data.frame(predict(dummy2, newdata = test_data))
test_data$ML_predictions <- predict(MLmodel, newdata = test_data)
cat("Correlation between testing data predictions and actual values", cor(test_data$ML_predictions, test_data$Total_Trans_Ct))
View(test_data)
sum((test_data$Total_Trans_Ct - test_data$ML_predictions)^2) / length(test_data)
sum((test_data$Total_Trans_Ct - test_data$ML_predictions)^2)
length(test_data)
sum((test_data$Total_Trans_Ct - test_data$ML_predictions)^2) / nrow(test_data)
sum((test_data$Total_Trans_Ct - test_data$ML_predictions)^2) / nrow(test_data) %>%
sqrt()
(sum((test_data$Total_Trans_Ct - test_data$ML_predictions)^2) / nrow(test_data)) %>%
sqrt()
mean(data$Total_Trans_Ct)
training_data %>%
ggplot(aes(x = as.factor(Exited), y = Total_Trans_Ct, fill = as.factor(Exited))) +
geom_boxplot() +
scale_fill_manual(values = c("dodgerblue", "red")) +
scale_x_discrete(labels = c("Did not Exit", "Exited")) +
theme(axis.title.x = element_blank(),
legend.position = "none") +
labs(y = "Total Transaction Count")
training_data %>%
ggplot(aes(x = as.factor(Exited), y = Total_Trans_Amt, fill = as.factor(Exited))) +
geom_boxplot() +
scale_fill_manual(values = c("dodgerblue", "red")) +
scale_x_discrete(labels = c("Did not Exit", "Exited")) +
theme(axis.title.x = element_blank(),
legend.position = "none") +
labs(y = "Total Transaction Amount ($)")
data %>%
ggplot(aes(x = Total_Trans_Amt, y = Total_Trans_Ct, color = as.factor(Exited))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Total Transaction Amount",
y = "Total Transaction Count",
color = "Exit Status") +
scale_color_manual(labels = c("Did not Exit", "Exited"), values = c("dodgerblue", "orange"))
